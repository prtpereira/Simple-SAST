package org.checkmarx.codescanner.service;

import org.checkmarx.codescanner.model.Vulnerability;
import org.checkmarx.codescanner.util.security.SecurityChecker;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import java.nio.charset.StandardCharsets;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.Callable;
import java.util.stream.IntStream;

public class VulnerabilityFinderCallable implements Callable<List<Vulnerability>> {

    private final String pathName;
    List<SecurityChecker> securityCheckers;

    public VulnerabilityFinderCallable(String pathName, List<SecurityChecker> securityCheckers)
    {
        this.pathName = pathName;
        this.securityCheckers = securityCheckers;
    }

    public String getPathName() {
        return pathName;
    }

    @Override
    public List<Vulnerability> call() {
        List<Vulnerability> vulnerabilities = new ArrayList<>();

        try {
            File file = new File(pathName);
            FileInputStream fis = new FileInputStream(file);
            InputStreamReader isr = new InputStreamReader(fis, StandardCharsets.UTF_8);
            BufferedReader br = new BufferedReader(isr);

            String line;
            for(int lineNumber = 1; (line = br.readLine()) != null; lineNumber++)  {
                String code = line;
                int finalLineNumber = lineNumber;

                securityCheckers.forEach(securityChecker -> {
                    AbstractMap.SimpleEntry<String, Integer> detectedVulns = securityChecker.detect(code);
                    IntStream.range(0, detectedVulns.getValue()).forEach(n -> vulnerabilities.add(
                            new Vulnerability(pathName, detectedVulns.getKey(), finalLineNumber))
                    );
                });
            }
            br.close();

        } catch (Exception e) {
            System.err.println("An error occurred while trying to check the vulnerabilities on the source code. Error: " + e.getMessage());
        }

        return vulnerabilities;
    }


}
