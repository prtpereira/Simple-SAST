package org.checkmarx.codescanner.unit.service;

import org.checkmarx.codescanner.model.Vulnerability;
import org.checkmarx.codescanner.service.VulnerabilityFinderCallable;
import org.checkmarx.codescanner.util.security.CrossSiteScriptingChecker;
import org.checkmarx.codescanner.util.security.SQLInjectionChecker;
import org.checkmarx.codescanner.util.security.SecurityChecker;
import org.checkmarx.codescanner.util.security.SensitiveDataChecker;
import org.junit.Assert;
import org.junit.Test;

import java.util.ArrayList;
import java.util.List;

public class VulnerabilityFinderCallableTest  {

    VulnerabilityFinderCallable vulnerabilityFinderCallable;

    @Test
    public void testVulnerabilityFinderCallable() {
        List<SecurityChecker> securityCheckers = List.of(new CrossSiteScriptingChecker(), new SensitiveDataChecker(), new SQLInjectionChecker());
        String path = "src/test/input/file_3_sqlin.txt";
        vulnerabilityFinderCallable = new VulnerabilityFinderCallable(path, securityCheckers);

        List<Vulnerability> expectedVulnerabilities = List.of(
            new Vulnerability(path, "SQL Injection", 6),
            new Vulnerability(path, "SQL Injection", 8)
        );

        Assert.assertEquals(expectedVulnerabilities, vulnerabilityFinderCallable.call());
    }

    @Test
    public void testVulnerabilityFinderCallable_scanForSensitiveData_noDetectionsFound() {
        List<SecurityChecker> securityCheckers = List.of(new SensitiveDataChecker());
        String path = "src/test/input/file_3_sqlin.txt";
        vulnerabilityFinderCallable = new VulnerabilityFinderCallable(path, securityCheckers);

        List<Vulnerability> expectedVulnerabilities = new ArrayList<>();

        Assert.assertEquals(expectedVulnerabilities, vulnerabilityFinderCallable.call());
    }

    @Test
    public void testVulnerabilityFinderCallable_scanForSensitiveData_detectionsFound() {
        List<SecurityChecker> securityCheckers = List.of(new SensitiveDataChecker());
        String path = "src/test/input/file_2_sensitive.txt";
        vulnerabilityFinderCallable = new VulnerabilityFinderCallable(path, securityCheckers);

        List<Vulnerability> expectedVulnerabilities = List.of(
            new Vulnerability(path, "Sensitive data exposure", 3),
            new Vulnerability(path, "Sensitive data exposure", 3),
            new Vulnerability(path, "Sensitive data exposure", 3),
            new Vulnerability(path, "Sensitive data exposure", 13)
        );

        Assert.assertEquals(expectedVulnerabilities, vulnerabilityFinderCallable.call());
    }

}
